networks:
  demo:
    driver: bridge

services:


############################## AUX SERVICES ###############################


  postgres:
    extends:
      file: docker-compose.dependencies.yml
      service: postgres

  pgweb:
    extends:
      file: docker-compose.dependencies-clients.yml
      service: pgweb


  mongodb:
    extends:
      file: docker-compose.dependencies.yml
      service: mongodb

  mongo-express:
    extends:
      file: docker-compose.dependencies-clients.yml
      service: mongo-express


  redis:
    extends:
      file: docker-compose.dependencies.yml
      service: redis

  redis-commander:
    extends:
      file: docker-compose.dependencies-clients.yml
      service: redis-commander


  rabbitmq:
    extends:
      file: docker-compose.dependencies.yml
      service: rabbitmq


  storage:
    extends:
      file: docker-compose.dependencies.yml
      service: storage


############################## EXTERNAL ###############################


  mailpit:
    extends:
      file: docker-compose.external.yml
      service: mailpit


############################## OBSERVABILITY ###############################


  prometheus:
    extends:
      file: docker-compose.observability.yml
      service: prometheus


  loki:
    extends:
      file: docker-compose.observability.yml
      service: loki


  tempo:
    extends:
      file: docker-compose.observability.yml
      service: tempo


  pyroscope:
    extends:
      file: docker-compose.observability.yml
      service: pyroscope


  otel-collector:
    extends:
      file: docker-compose.observability.yml
      service: otel-collector


  altertmanager:
    extends:
      file: docker-compose.observability.yml
      service: altertmanager


  postgres-exporter:
    extends:
      file: docker-compose.observability.yml
      service: postgres-exporter


  grafana:
    extends:
      file: docker-compose.observability.yml
      service: grafana


############################## DEMO SERVICES ###############################


  gateway-email:
    build:
      context: .
      dockerfile: ./src/Demo.Gateway.Email/Dockerfile
    image: technobre/demo-gateway-email
    container_name: gateway-email
    restart: always
    environment:
      SYSTEM_ENVIRONMENT: PROD
      CONNECTIONSTRINGS__STORAGE: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://storage:10000/devstoreaccount1;
      STORAGE__CONTAINERNAME: email-blobs
      MESSAGEBUS__HOSTNAME: rabbitmq
      MESSAGEBUS__SSL__SERVERNAME: rabbitmq
      ### Observability
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      PYROSCOPE_SERVER_ADDRESS: http://pyroscope:4040
      PYROSCOPE_LABELS: system.environment:PROD
    ports:
      - 8098:8080
    networks:
      - demo
    depends_on:
      rabbitmq:
        condition: service_healthy
      storage:
        condition: service_healthy
      pyroscope:
        condition: service_started
      otel-collector:
        condition: service_started

  gateway-sms:
    build:
      context: .
      dockerfile: ./src/Demo.Gateway.SMS/Dockerfile
    image: technobre/demo-gateway-sms
    container_name: gateway-sms
    restart: always
    environment:
      SYSTEM_ENVIRONMENT: PROD
      MESSAGEBUS__HOSTNAME: rabbitmq
      MESSAGEBUS__SSL__SERVERNAME: rabbitmq
      ### Observability
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      PYROSCOPE_SERVER_ADDRESS: http://pyroscope:4040
      PYROSCOPE_LABELS: system.environment:PROD
    ports:
      - 8099:8080
    networks:
      - demo
    depends_on:
      rabbitmq:
        condition: service_healthy
      pyroscope:
        condition: service_started
      otel-collector:
        condition: service_started

  api-users:
    build:
      context: .
      dockerfile: ./src/Demo.Api.Users/Dockerfile
    image: technobre/demo-api-users
    container_name: api-users
    restart: always
    environment:
      SYSTEM_ENVIRONMENT: PROD
      CONNECTIONSTRINGS__MONGODB: mongodb://mongodb:27017/Demo
      CONNECTIONSTRINGS__REDIS: redis:6379
      NOTIFICATIONSAPI: http://api-notifications:8081
      ### Observability
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      PYROSCOPE_SERVER_ADDRESS: http://pyroscope:4040
      PYROSCOPE_LABELS: system.environment:PROD
      ### API Configuration
      EXCEPTION_PROBABILITY: 0
    ports:
      - 8088:8080
    networks:
      - demo
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      pyroscope:
        condition: service_started
      otel-collector:
        condition: service_started

  api-notifications:
    build:
      context: .
      dockerfile: ./src/Demo.Api.Notifications/Dockerfile
    image: technobre/demo-api-notifications
    container_name: api-notifications
    restart: always
    environment:
      SYSTEM_ENVIRONMENT: PROD
      CONNECTIONSTRINGS__POSTGRES: Server=postgres;Port=5432;Database=demodb;User Id=demouser;Password=a123456789;
      CONNECTIONSTRINGS__STORAGE: DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://storage:10000/devstoreaccount1;
      STORAGE__CONTAINERNAME: email-blobs
      MESSAGEBUS__HOSTNAME: rabbitmq
      MESSAGEBUS__SSL__SERVERNAME: rabbitmq
      USERSAPI: http://api-users:8080
      ### Observability
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      PYROSCOPE_SERVER_ADDRESS: http://pyroscope:4040
      PYROSCOPE_LABELS: system.environment:PROD
      ### API Configuration
      EXCEPTION_PROBABILITY: 0
    ports:
      - 8089:8080 # Web Api
      - 8090:8081 # gRPC Api
    networks:
      - demo
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      storage:
        condition: service_healthy
      pyroscope:
        condition: service_started
      otel-collector:
        condition: service_started
      gateway-sms:
        condition: service_healthy
      gateway-email:
        condition: service_healthy
      api-users:
        condition: service_healthy


############################## TESTS ###############################


  k6:
    image: grafana/k6:1.2.0
    container_name: k6
    environment:
      K6_PROMETHEUS_RW_SERVER_URL: http://prometheus:9090/api/v1/write
      K6_PROMETHEUS_RW_TREND_STATS: p(95),p(99),min,max
      K6_PROMETHEUS_RW_TREND_AS_NATIVE_HISTOGRAM: true
      # APIS
      USERS_API_HOST: http://api-users:8080
      NOTIFICATIONS_API_HOST: http://api-notifications:8080
    volumes:
      - ./tests/tests.js:/scripts/script.js
    working_dir: /scripts
    command: run -o experimental-prometheus-rw /scripts/script.js
    networks:
      - demo
    depends_on:
      prometheus:
        condition: service_healthy
      api-users:
        condition: service_healthy
      api-notifications:
        condition: service_healthy
