networks:
  demo:
    driver: bridge

services:

  postgres:
    image: postgres:17.4-alpine3.20
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: demodb
      POSTGRES_USER: demouser
      POSTGRES_PASSWORD: a123456789
    volumes:
      - ./src/Postgres/initdb.sql:/docker-entrypoint-initdb.d/initdb.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "demodb", "-U", "demouser"]
      interval: 15s
      timeout: 30s
      retries: 5
    networks:
      - demo

  mongodb:
    image: mongo:8.0.8
    container_name: mongodb
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: root
    #   MONGO_INITDB_ROOT_PASSWORD: a123456789
    ports:
      - "27017:27017"
    volumes:
      - ./src/Mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - demo
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s

  redis:
    image: redis:7.4.2-alpine
    container_name: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - demo
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      start_period: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.0.9-management
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672 # AMQP
      - 15672:15672 # Management
      - 15692:15692 # Prometeus
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    command: >
      bash -c "rabbitmq-plugins enable --offline rabbitmq_prometheus && rabbitmq-server"
    networks:
      - demo
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      start_period: 3s
      retries: 5

  storage:
    image: mcr.microsoft.com/azure-storage/azurite:3.34.0 # https://github.com/Azure/Azurite
    container_name: storage
    restart: always
    command: "azurite-blob --blobHost 0.0.0.0 --blobPort 10000"
    ports:
      - 10000:10000
    networks:
      - demo
    healthcheck:
      test: nc 127.0.0.1 10000 -z
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s
